---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Print Avi version
      debug:
        msg: "{{ avi_version.value }}"

    - name: Print Avi controller IP
      debug:
        msg: "{{ controllers_ip.value.0 }}"

    - name: Set variable avi_credentials
      set_fact:
        avi_credentials: >
          {'api_version': "{{ avi_version.value }}",
           'controller': "{{ controllers_ip.value.0 }}",
           'password': "{{ avi_password }}",
           'username': "admin"}
      when:
        - avi_version.value is defined
        - controllers_ip.value.0 is defined
        - avi_password is defined

    - name: Defining variable vcenter_configuration
      set_fact:
        community.network.vcenter_configuration:
          username: "{{ avi.cloud.vcenter.username }}"
          password: "{{ vsphere_password }}"
          vcenter_url: "{{ avi.cloud.vcenter.server }}"
          privilege: WRITE_ACCESS
          datacenter: "{{ avi.cloud.vcenter.dc }}"
      when:
        - avi.cloud.vcenter.username is defined
        - vsphere_password is defined
        - avi.cloud.vcenter.server is defined
        - avi.cloud.vcenter.dc is defined

    - name: Configure Avi Cloud
      community.network.avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name:  "{{ avi.cloud.name }}"
        vtype: "{{ avi.cloud.type }}"
        vcenter_configuration: "{{ vcenter_configuration }}"
        dhcp_enabled: "{{ avi.cloud.vcenter.management_network.dhcp_enabled }}"
      register: output_cloud_vmw
      when:
        - avi.cloud.name is defined
        - avi.cloud.type is defined
        - vcenter_configuration is defined
        - avi.cloud.vcenter.management_network.dhcp_enabled is defined

    - set_fact:
        cloud_vmw_uuid: "{{ output_cloud_vmw.obj.uuid }}"
      when:
        - output_cloud_vmw is defined

    - name: Wait for network sync for cloud to complete...
      community.network.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "get"
        path: "cloudruntime"
        params:
          name: "{{ avi.cloud.name }}"
      register: cloudruntime
      until: cloudruntime.obj.results[0].network_sync_complete
      retries: 30
      delay: 5

    - name: Configure cloud management network
      community.network.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "patch"
        path: '{{ "cloud/" + cloud_vmw_uuid }}'
        data:
          replace:
            vcenter_configuration:
              management_network: '{{ "/api/vimgrnwruntime/?name=" + avi.cloud.vcenter.management_network.name }}'
      when:
        - avi.cloud.vcenter.management_network.name is defined