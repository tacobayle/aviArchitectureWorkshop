---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Print Avi version
      debug:
        msg: "{{ avi_version.value }}"

    - name: Print Avi controller IP
      debug:
        msg: "{{ controllers_ip.value.0 }}"

    - name: Set variable avi_credentials
      set_fact:
        avi_credentials: >
          {'api_version': "{{ avi_version.value }}",
           'controller': "{{ controllers_ip.value.0 }}",
           'password': "{{ avi_password }}",
           'username': "admin"}
      when:
        - avi_version.value is defined
        - controllers_ip.value.0 is defined
        - avi_password is defined

    - name: Create Avi DNS provider Without donain name
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ dns.name }}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      when:
        - dns.name is defined

    - name: Update Avi DNS provider With donain names
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op: add
        avi_api_update_method: patch
        internal_profile:
          dns_service_domain:
            - domain_name: "{{ item }}"
              pass_through: true
              record_ttl: 100
          ttl: 300
        name: "{{ dns.name }}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      loop: "{{ dns.domains }}"
      loop_control:
        label: "{{ item }}"
      when:
        - dns.name is defined
        - dns.domains is defined

    - name: get Network details
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput

    - name: Update Vip Networks
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ item.cloud }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ item.name }}"
        configured_subnets:
          - prefix:
              mask: "{{ item.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ item.type }}"
                addr: "{{ item.cidr.split('/')[0] }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ item.type }}"
                    addr: "{{ item.ipStartPool }}"
                  end:
                    type: "{{ item.type }}"
                    addr: "{{ item.ipEndPool }}"
        dhcp_enabled: "{{ item.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ item.exclude_discovered_subnets }}"
        vcenter_dvs: "{{ item.vcenter_dvs }}"
      register: output_network_vips
      loop: "{{ ipam.networks.vip }}"
      loop_control:
        label: "Uptade network called {{ item.name }}"
      when:
        - ipam.networks.vip is defined

    - name: Update Others Networks
      avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ item.cloud }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ item.name }}"
        configured_subnets:
          - prefix:
              mask: "{{ item.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ item.type }}"
                addr: "{{ item.cidr.split('/')[0] }}"
        dhcp_enabled: "{{ item.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ item.exclude_discovered_subnets }}"
        vcenter_dvs: "{{ item.vcenter_dvs }}"
      loop: "{{ ipam.networks.others }}"
      loop_control:
        label: "Uptade network called {{ item.name }}"
      when:
        - ipam.networks.vip is defined

    #    - name: Defining configured_subnets for networks vip
#      set_fact:
#        configured_subnets: "{{ configured_subnets | default([]) + [{ 'prefix': {'mask': {{ item.networks.vip.cidr.split('/')[1] }}, 'ip_addr': {'type': item.networks.vip.type, 'addr': {{ item.networks.vip.cidr.split('/')[0]}}}, 'static_ip_ranges': ['range': {'begin': {'addr': item.networks.vip.ipStartPool, 'type': item.networks.vip.type}, 'end': {'addr': item.networks.vip.ipEndPool, 'type': item.networks.vip.type}}]}]"
#      loop: "{{ ipam.networks.vip }}"
#
#    - name: Define configured_subnets for networks vip
#      set_fact:
#        configured_subnets:
#          - prefix:
#              mask: "{{ no_access_vcenter.network_vip.defaultGateway | ipv4('prefix') }}"
#              ip_addr:
#                type: "{{ no_access_vcenter.network_vip.type | default('V4') }}"
#                addr: "{{ no_access_vcenter.network_vip.defaultGateway | ipv4('network') }}"
#            static_ip_ranges:
#              - range:
#                  begin:
#                    type: "{{ no_access_vcenter.network_vip.type | default('V4') }}"
#                    addr: "{{ no_access_vcenter.network_vip.ipStartPool }}"
#                  end:
#                    type: "{{ no_access_vcenter.network_vip.type | default('V4') }}"
#                    addr: "{{ no_access_vcenter.network_vip.ipEndPool }}"
#      when:
#        - no_access_vcenter.network_vip.defaultGateway is defined
#        - no_access_vcenter.application is true
#        - no_access_vcenter.network_vip.ipStartPool is defined
#        - no_access_vcenter.network_vip.ipEndPool is defined
#

#    - name: Create Avi IPAM
#      avi_ipamdnsproviderprofile:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        name: "{{ ipam.name }}"
#        type: IPAMDNS_TYPE_INTERNAL
#      register: output_avi_ipam
#      when:
#        - ipam.name is defined
#
#    - name: Print Avi version
#      debug:
#        msg: "{{ output_network_vips }}"

    - name: Update Avi IPAM provider With Networks
      avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
#        avi_api_patch_op: add
#        avi_api_update_method: patch
        name: "{{ ipam.name }}"
#        uuid: "{{ output_avi_ipam.obj.uuid }}"
        type: IPAMDNS_TYPE_INTERNAL
        internal_profile:
          usable_networks:
            - nw_ref: "/api/network/{{ item.obj.uuid }}"
      loop: "{{ output_network_vips.results }}"
      loop_control:
        label: "Uptade IPAM with network called {{ item.obj.name }}"
      when:
        - ipam.name is defined
        - output_network_vips.results is defined
