---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Print Avi version
      debug:
        msg: "{{ avi_version.value }}"

    - name: Print Avi controller IP
      debug:
        msg: "{{ controllers_ip.value.0 }}"

    - name: Set variable avi_credentials
      set_fact:
        avi_credentials: >
          {'api_version': "{{ avi_version.value }}",
           'controller': "{{ controllers_ip.value.0 }}",
           'password': "{{ avi_password }}",
           'username': "admin"}
      when:
        - avi_version.value is defined
        - controllers_ip.value.0 is defined
        - avi_password is defined

    - name: Create pool without server
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "pool-{{ vs.name }}"
        cloud_ref: "/api/cloud/?name={{ vs.cloud | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ vs.tenant_ref | default('admin') }}"
      when:
        - vs.name is defined

    - name: update pool with servers
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "pool-{{ vs.name }}"
        cloud_ref: "/api/cloud/?name={{ vs.cloud | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ vs.tenant_ref | default('admin') }}"
        default_server_port: "{{ vs.server_ports | default('admin') }}"
        servers:
          - ip:
              addr: "{{ item }}"
              type: 'V4'
      loop: "{{ backend_vmw.value }}"
      when:
        - vs.name is defined
        - backend_vmw.value is defined

    - name: get Network details
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput

    - name: Retrieve Network details
      set_fact:
        networkName: "{{ item.name }}"
        networkMask: "{{ item.configured_subnets.0.prefix.mask }}"
        networkAddress: "{{ item.configured_subnets.0.prefix.ip_addr.addr }}"
        networkType: "{{ item.configured_subnets.0.prefix.ip_addr.type }}"
      loop: "{{ networkOutput.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.name == vs.network

    - name: Debug
      debug:
        msg: "{{ networkName }}"


    - name: Debug
      debug:
        msg: "{{ networkMask }}"

    - name: Debug
      debug:
        msg: "{{ networkAddress }}"

    - name: Debug
      debug:
        msg: "{{ networkType }}"

    - name: Create vsvip
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ vs.name }}"
        cloud_ref: "/api/cloud/?name={{ vs.cloud | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name{{ vs.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "vs.name + '.' + vs.domain) }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ networkName }}"
              subnet:
                mask: "{{ networkMask }}"
                ip_addr:
                  type: "{{ networkType }}"
                  addr: "{{ networkAddress }}"
      when:
        - vs.name is defined
        - vs.domain is defined
        - networkName is defined
        - networkMask is defined
        - networkType is defined
        - networkAddress is defined

    - name: Create  HTTP Virtualservice
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ vs.name }}"
        cloud_ref: "/api/cloud/?name={{ vs.cloud | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name{{ vs.tenant_ref | default('admin') }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services: "{{ vs.services }}"
        pool_ref: "pool-{{ vs.name }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ vs.name }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ vs.se_group_ref | default('Default-Group') }}"
        state: "{{ state | default(omit) }}"
        analytics_policy:
          udf_log_throttle: 10
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          all_headers: true
      when:
        - vs.name is defined
        - vs.services

